generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @map("updated_at")
  role          UserRole       @default(USER)
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]

  @@map("users")
}

model Subscription {
  id              String             @id @default(cuid())
  userId          String
  planId          String             // ID del plan en la tabla plans
  mercadoPagoId   String             @unique
  status          SubscriptionStatus @default(PENDING)
  amount          Int
  currency        String             @default("COP")
  frequency       Int
  frequencyType   String             @default("months")
  startDate       DateTime?
  endDate         DateTime?
  nextBillingDate DateTime?
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @default(now()) @map("updated_at")
  
  // Relaciones
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan            Plan               @relation(fields: [planId], references: [id], onDelete: Restrict)
  payments        Payment[]

  @@index([userId])
  @@index([planId])
  @@index([mercadoPagoId])
  @@index([status])
  @@map("subscriptions")
}

model Payment {
  id                String        @id @default(cuid())
  subscriptionId    String
  mercadoPagoId     String        @unique
  amount            Int
  currency          String        @default("COP")
  status            PaymentStatus @default(PENDING)
  paymentMethod     String?
  payerEmail        String?
  externalReference String?
  processedAt       DateTime?
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @default(now()) @map("updated_at")
  subscription      Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([mercadoPagoId])
  @@index([status])
  @@map("payments")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  ADMIN
  USER
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED
  FAILED
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  REFUNDED
}

model Plan {
  id          String   @id @default(cuid())
  name        String   @unique // "Pro", "Business", etc.
  description String?
  priceMonthly Int     // Precio en centavos
  priceYearly  Int     // Precio en centavos
  benefits    String[] // Array de beneficios
  limitations String[] // Array de limitaciones
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")

  // Relaciones
  subscriptions Subscription[]

  @@index([isActive])
  @@map(name: "plans")
}
